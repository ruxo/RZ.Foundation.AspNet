@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.JSInterop

@inject IJSRuntime JS
@inject ShellViewModel Shell

@if (Direct){
    <MudNavLink Icon="@Icon" Href="@Href" Match="Match">
        @if (!IconOnly){
        @ChildContent
        }
    </MudNavLink>
}
else{
    <MudNavLink Icon="@Icon" OnClick="@(() => NavigateTo(Href))" Match="Match">
        @if (!IconOnly){
            @ChildContent
        }
    </MudNavLink>
}

@code {

    [Parameter, EditorRequired] public required string Href { get; set; }
    [Parameter, EditorRequired] public required RenderFragment ChildContent { get; set; }

    /// <summary>
    /// Skip the shell navigation
    /// </summary>
    [Parameter] public bool Direct { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public NavLinkMatch Match { get; set; } = NavLinkMatch.All;

    [CascadingParameter(Name="IconOnly")] bool IconOnly { get; set; }

    async Task NavigateTo(string path) {
        Shell.NavigateTo(path);

        await JS.InvokeVoidAsync("window.history.replaceState", null, null, Shell.BasePath + path);
    }
}